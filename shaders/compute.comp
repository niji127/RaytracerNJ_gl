#version 460 core

uniform uint time_seed;
uniform uvec2 dims;
uniform vec3 camera_position;
uniform mat4 view;
uniform float FOV;

const float PI=3.1415926f;
const float EPS=.001f;
const int MAX_LOOP=1000;
const float roussian_roulette=.8;
const int spp=1;
const uint BVH_MAX_TRI=3;

struct Material
{
    vec3 baseColor;
    float subsurface;
    
    float metallic;
    float specular;
    float specularTint;
    float roughness;
    
    float anistropic;
    float sheen;
    float sheenTint;
    float clearcoat;
    
    float clearcoatGloss;
    float offset[3];
};

struct Point
{
    vec3 position;
    vec3 normal;
};

struct Triangle
{
    Point point[3];
    vec3 normal;
    int material_id;
    vec3 e1,e2;
};

struct BVH
{
    vec3 pos_max;
    int triangle_num;
    vec3 pos_min;
    int hit_id;
    int miss_id;
    int triangle_list[BVH_MAX_TRI];
};

layout(local_size_x=16,local_size_y=16,local_size_z=1)in;
layout(rgba32f,binding=0)uniform image2D color_out;
layout(rgba32f,binding=1)uniform image2D normal_out;
layout(rgba32f,binding=2)uniform image2D position_out;

layout(std430,binding=3)buffer triangle_buffer
{
    int triangle_counts;
    Triangle triangles[];
};

layout(std430,binding=4)buffer light_buffer
{
    int light_counts;
    float light_area;
    int lights[];
};

layout(std430,binding=5)buffer material_buffer
{
    int material_counts;
    Material materials[];
};

layout(std430,binding=6)buffer BVH_buffer
{
    BVH bvhs[];
};

float getRandom(inout uint state)
{
    state^=state<<13;
    state^=state>>17;
    state^=state<<5;
    return float(state)/0xffffffffU;
}

vec3 inverseVec3(vec3 dir)
{
    vec3 dir_inv;
    
    if(dir.x==0.)
    dir_inv.x=EPS/dir.x;
    else
    dir_inv.x=1./dir.x;
    
    if(dir.y==0.)
    dir_inv.y=EPS/dir.y;
    else
    dir_inv.y=1./dir.y;
    
    if(dir.z==0.)
    dir_inv.z=EPS/dir.z;
    else
    dir_inv.z=1./dir.z;
    
    return dir_inv;
}

float sqr(float val)
{
    return val*val;
}

float sqr5(float val)
{
    float val2=val*val;
    return val2*val2*val;
}

struct Ray
{
    vec3 origin;
    vec3 direction;
    vec3 direction_inv;
};
struct Intersect
{
    vec3 position;
    float dis;
    vec3 normal;
    int material_id;
    bool happened;
};
Intersect intersectTriangle(Ray ray,int triangle_id)
{
    Intersect inter;
    inter.happened=false;
    inter.normal=vec3(0.);
    
    Triangle triangle=triangles[triangle_id];
    if(dot(ray.direction,triangle.normal)>0.)
    {
        return inter;
    }
    
    vec3 s1=cross(ray.direction,triangle.e2);
    float det=dot(s1,triangle.e1);
    if(abs(det)==0.)
    {
        return inter;
    }
    
    float det_inv=1.f/det;
    vec3 s=ray.origin-triangle.point[0].position;
    vec3 s2=cross(s,triangle.e1);
    
    float t=dot(s2,triangle.e2)*det_inv;
    float b1=dot(s1,s)*det_inv;
    float b2=dot(s2,ray.direction)*det_inv;
    
    float b0=1.f-b1-b2;
    if(t<-EPS||b0<-EPS||b1<-EPS||b2<-EPS)
    {
        return inter;
    }
    
    inter.normal=triangle.point[0].normal*b0+triangle.point[1].normal*b1+triangle.point[2].normal*b2;
    inter.normal=normalize(inter.normal);
    
    if(dot(ray.direction,inter.normal)>0.)
    {
        return inter;
    }
    inter.dis=t;
    inter.happened=true;
    inter.material_id=triangle.material_id;
    inter.position=ray.origin+t*ray.direction;
    
    return inter;
}

Intersect getintersect(Ray ray)
{
    Intersect final_inter;
    final_inter.happened=false;
    final_inter.dis=1.e6;
    final_inter.normal=vec3(0.);
    for(int i=0;i<triangle_counts.x;i++)
    {
        Intersect inter=intersectTriangle(ray,i);
        if(inter.happened==true&&inter.dis<final_inter.dis)
        final_inter=inter;
    }
    return final_inter;
}

bool is_intersect(Ray ray,uint bvh_id)
{
    BVH bvh=bvhs[bvh_id];
    vec3 tmin=(bvh.pos_min-ray.origin)*ray.direction_inv;
    vec3 tmax=(bvh.pos_max-ray.origin)*ray.direction_inv;
    
    if(ray.direction.x<0.f)
    {
        float temp=tmin.x;
        tmin.x=tmax.x;
        tmax.x=temp;
    }
    if(ray.direction.y<0.f)
    {
        float temp=tmin.y;
        tmin.y=tmax.y;
        tmax.y=temp;
    }
    if(ray.direction.z<0.f)
    {
        float temp=tmin.z;
        tmin.z=tmax.z;
        tmax.z=temp;
    }
    
    float t_enter=max(tmin.x,max(tmin.y,tmin.z));
    float t_exit=min(tmax.x,min(tmax.y,tmax.z));
    
    if(t_enter>t_exit+EPS||t_exit<-EPS)
    return false;
    else
    return true;
}

Intersect get_intersect_BVH(Ray ray)
{
    Intersect final_inter;
    final_inter.happened=false;
    final_inter.dis=1.e6;
    final_inter.normal=vec3(0.);
    
    uint bvh_id=0;
    while(bvh_id!=-1)
    {
        BVH bvh=bvhs[bvh_id];
        if(is_intersect(ray,bvh_id))
        {
            for(int i=0;i<bvh.triangle_num;i++)
            {
                Intersect inter=intersectTriangle(ray,bvh.triangle_list[i]);
                if(inter.happened==true&&inter.dis<final_inter.dis)
                final_inter=inter;
            }
            bvh_id=bvh.hit_id;
        }
        else
        {
            bvh_id=bvh.miss_id;
        }
    }
    
    return final_inter;
}

Intersect sampleLight(Intersect inter,inout uint state)
{
    float rand=getRandom(state);
    int light_id=int(rand*light_counts);
    Triangle light_triangle=triangles[light_id];
    
    float b0=getRandom(state);
    float b1=getRandom(state);
    if(b1>b0)
    b1-=b0;
    else
    b0-=b1;
    float b2=1.-b0-b1;
    
    vec3 sample_position=b0*light_triangle.point[0].position+b1*light_triangle.point[1].position+b2*light_triangle.point[2].position;
    float light_distance=length(sample_position-inter.position);
    vec3 light_direction=normalize(sample_position-inter.position);
    
    Intersect inter_light;
    inter_light.happened=false;
    inter_light.normal=vec3(0.);
    if(dot(light_direction,inter.normal)<EPS)
    {
        return inter_light;
    }
    
    Ray ray;
    ray.origin=inter.position;
    ray.direction=light_direction;
    ray.direction_inv=inverseVec3(ray.direction);
    
    Intersect shadow_check=get_intersect_BVH(ray);
    if(shadow_check.dis<light_distance-EPS)
    {
        return inter_light;
    }
    
    vec3 sample_normal=b0*light_triangle.point[0].normal+b1*light_triangle.point[1].normal+b2*light_triangle.point[2].normal;
    inter_light.dis=light_distance;
    inter_light.happened=true;
    inter_light.material_id=0;
    inter_light.normal=sample_normal;
    inter_light.position=sample_position;
    return inter_light;
}

float GTR1(float NdotH,float a)
{
    float a2=a*a;
    NdotH=min(NdotH,1.-EPS);
    float t=1+(a2-1)*NdotH*NdotH;
    return(a2-1)/(PI*log(a2)*t);
}

float GTR2(float NdotH,float a)
{
    a=max(a,EPS);
    float a2=a*a;
    float t=1+(a2-1)*NdotH*NdotH;
    return a2/(PI*t*t);
}

float GTR2_aniso(float NdotH,float HdotX,float HdotY,float ax,float ay)
{
    ax=max(ax,EPS);
    ay=max(ay,EPS);
    return 1/(PI*ax*ay*sqr(sqr(HdotX/ax)+sqr(HdotY/ay)+NdotH*NdotH));
}

vec3 get_aniso_Y(vec3 N)
{
    vec3 Up=vec3(0.,0.,1.);
    float NdotUp=dot(N,Up);
    vec3 Y;
    if(NdotUp>1.-EPS||NdotUp<-1.+EPS)
    Y=vec3(1.,0.,0.);
    else
    Y=normalize(Up-dot(N,Up)*N);
    return Y;
}

float smith_GGX_aniso(float NdotV,float VdotX,float VdotY,float ax,float ay)
{
    ax=max(ax,EPS);
    ay=max(ay,EPS);
    return 2.*NdotV/(NdotV+sqrt(sqr(VdotX*ax)+sqr(VdotY*ay)+sqr(NdotV)));
}

float smith_GGX_iso(float NdotV,float a)
{
    a=max(a,EPS);
    float a2=sqr(a);
    return 2.*NdotV/(NdotV+sqrt(a2+(1.-a2)*sqr(NdotV)));
}

vec3 fresnelSchlick(float cosTheta,vec3 Cs)
{
    return Cs+(1.-Cs)*sqr5(clamp(1.-cosTheta,0.,1.));
}

vec3 getBRDF(vec3 w_in,vec3 w_out,vec3 N,vec3 X,vec3 Y,int material_id)
{
    // Variables
    float in_dot_N=dot(w_in,N);
    float out_dot_N=dot(w_out,N);
    
    if(in_dot_N<0.||out_dot_N<.0)
    return vec3(0.);
    
    vec3 H=normalize(w_in+w_out);
    float N_dot_H=max(dot(N,H),0.);
    float in_dot_H=max(dot(w_in,H),0.);
    
    // Mateiral
    vec3 color=materials[material_id].baseColor;
    float subsurface_coef=materials[material_id].subsurface;
    
    float metallic=materials[material_id].metallic;
    float specular_coef=materials[material_id].specular;
    float specular_tint=materials[material_id].specularTint;
    float roughness=materials[material_id].roughness;
    
    float anistropic=materials[material_id].anistropic;
    float sheen_coef=materials[material_id].sheen;
    float sheen_tint=materials[material_id].sheenTint;
    float clearcoat_coef=materials[material_id].clearcoat;
    
    float clearcoat_gloss=materials[material_id].clearcoatGloss;
    
    // Diffuse
    float FD90=.5+2.*roughness*sqr(in_dot_H);
    float diffuse_in=1.+(FD90-1.)*sqr5(in_dot_N);
    float diffuse_out=1.+(FD90-1.)*sqr5(out_dot_N);
    float diffuse=diffuse_in*diffuse_out;
    
    // Subsurface
    float fss_90=roughness*sqr(in_dot_H);
    float fss_in=1.+(fss_90-1.)*sqr5(in_dot_N);
    float fss_out=1.+(fss_90-1.)*sqr5(out_dot_N);
    float fss=fss_in*fss_out;
    float subsurface=1.25*(fss*(1./(in_dot_N+out_dot_N)-.5)+.5);
    
    // Sheen
    float lumc=.2126*color.r+.7152*color.g+.0722*color.b;
    vec3 ctint;
    if(lumc==0.)
    ctint=vec3(0.);
    else
    ctint=color/lumc;
    vec3 sheen=mix(vec3(1.),ctint,sheen_tint)*sheen_coef*sqr5(1.-in_dot_H);
    
    // Specular
    vec3 Cs=mix(.08*specular_coef*mix(vec3(1.),ctint,specular_tint),color,metallic);
    vec3 Fs=fresnelSchlick(in_dot_H,Cs);
    
    float aspect=sqrt(1.-.9*anistropic);
    float ax=sqr(roughness)/aspect;
    float ay=sqr(roughness)*aspect;
    float Ds=GTR2_aniso(N_dot_H,dot(H,X),dot(H,Y),ax,ay);
    
    float Gs=smith_GGX_aniso(out_dot_N,dot(w_out,X),dot(w_out,Y),ax,ay);
    Gs*=smith_GGX_aniso(in_dot_N,dot(w_in,X),dot(w_in,Y),ax,ay);
    
    vec3 specular=Fs*Ds*Gs;
    specular/=4.*in_dot_N*out_dot_N+EPS;
    
    // Clearcoat
    vec3 Fc=fresnelSchlick(in_dot_H,vec3(.04));
    float Dc=GTR1(N_dot_H,mix(.1,.001,clearcoat_gloss));
    float Gc=smith_GGX_iso(out_dot_N,.25)*smith_GGX_iso(in_dot_N,.25);
    vec3 clearcoat=clearcoat_coef*Fc*Dc*Gc;
    clearcoat/=16.*in_dot_N*out_dot_N+EPS;
    
    return(1.-metallic)*(color/PI*mix(diffuse,subsurface,subsurface_coef)+sheen)+specular+clearcoat;
}

vec3 sample_cos(vec3 N,inout uint state)
{
    vec2 Xi;
    Xi.x=getRandom(state);
    Xi.y=getRandom(state);
    
    float cosPhi=cos(2.*PI*Xi.x);
    float sinPhi=sin(2.*PI*Xi.x);
    float cosTheta=sqrt(1.-Xi.y);
    float sinTheta=sqrt(1.-cosTheta*cosTheta);
    
    vec3 H;
    H.x=cosPhi*sinTheta;
    H.y=sinPhi*sinTheta;
    H.z=cosTheta;
    
    vec3 Y=get_aniso_Y(N);
    vec3 X=normalize(cross(Y,N));
    
    vec3 sampleVec=X*H.x+Y*H.y+N*H.z;
    return normalize(sampleVec);
}

vec3 sample_GTR1(vec3 N,inout uint state,int material_id)
{
    float roughness=materials[material_id].roughness;
    float a=clamp(sqr(roughness),.01,.1);
    float a2=a*a;
    vec2 Xi;
    Xi.x=getRandom(state);
    Xi.y=getRandom(state);
    
    float cosPhi=cos(2.*PI*Xi.x);
    float sinPhi=sin(2.*PI*Xi.x);
    
    float nom=pow(a2,1.-Xi.y)-1.;
    float denom=a2-1.;
    
    float cosTheta=sqrt(nom/denom);
    float sinTheta=sqrt(1.-cosTheta*cosTheta);
    
    vec3 H;
    H.x=cosPhi*sinTheta;
    H.y=sinPhi*sinTheta;
    H.z=cosTheta;
    
    vec3 Y=get_aniso_Y(N);
    vec3 X=normalize(cross(Y,N));
    vec3 sampleVec=X*H.x+Y*H.y+N*H.z;
    
    return normalize(sampleVec);
}

vec3 sample_GTR2_aniso(vec3 N,inout uint state,int material_id)
{
    float roughness=materials[material_id].roughness;
    float anistropic=materials[material_id].anistropic;
    vec2 Xi;
    Xi.x=getRandom(state);
    Xi.y=getRandom(state);
    
    float aspect=sqrt(1.-.9*anistropic);
    float ax=max(EPS,sqr(roughness)/aspect);
    float ay=max(EPS,sqr(roughness)*aspect);
    
    float cosPhi=ax*cos(2.*PI*Xi.x);
    float sinPhi=ay*sin(2.*PI*Xi.x);
    float r=sqrt(cosPhi*cosPhi+sinPhi*sinPhi);
    cosPhi/=r;
    sinPhi/=r;
    
    float PHI_H=sqr(cosPhi/ax)+sqr(sinPhi/ay);
    float nom=PHI_H*(1.-Xi.y);
    float denom=(1.-PHI_H)*Xi.y+PHI_H;
    float cosTheta=sqrt(nom/denom);
    float sinTheta=sqrt(1.-cosTheta*cosTheta);
    
    vec3 H;
    H.x=cosPhi*sinTheta;
    H.y=sinPhi*sinTheta;
    H.z=cosTheta;
    
    vec3 Y=get_aniso_Y(N);
    vec3 X=normalize(cross(Y,N));
    vec3 sampleVec=X*H.x+Y*H.y+N*H.z;
    
    return normalize(sampleVec);
}

vec3 importanceSample(vec3 N,float in_dot_N,inout uint state,int material_id)
{
    vec3 color=materials[material_id].baseColor;
    float metallic=materials[material_id].metallic;
    float clearcoat=materials[material_id].clearcoat;
    float specular_coef=materials[material_id].specular;
    float specular_tint=materials[material_id].specularTint;
    
    float lumc=.2126*color.r+.7152*color.g+.0722*color.b;
    vec3 ctint;
    if(lumc==0.)
    ctint=vec3(0.);
    else
    ctint=color/lumc;
    vec3 Cs=mix(.08*specular_coef*mix(vec3(1.),ctint,specular_tint),color,metallic);
    vec3 Fs=fresnelSchlick(in_dot_N,Cs);
    float F=length(Fs);
    float dif=min(.8,(1.-metallic)*(1.-F));
    float sp=(1.-dif)*2./(2.+clearcoat);
    float cl=(1.-dif)*clearcoat/(2.+clearcoat);
    
    float sample_type=getRandom(state);
    if(sample_type<dif)
    return sample_cos(N,state);
    else if(sample_type<dif+sp)
    return sample_GTR2_aniso(N,state,material_id);
    else
    return sample_GTR1(N,state,material_id);
}

vec3 getAttenuation(vec3 w_in,vec3 w_out,vec3 N,int material_id)
{
    // Variables
    vec3 H=normalize(w_in+w_out);
    float N_dot_H=max(dot(N,H),0.);
    float in_dot_N=max(dot(w_in,N),0.);
    float out_dot_N=max(dot(w_out,N),0.);
    float in_dot_H=max(dot(w_in,H),0.);
    
    vec3 color=materials[material_id].baseColor;
    float specular_coef=materials[material_id].specular;
    float specular_tint=materials[material_id].specularTint;
    
    float metallic=materials[material_id].metallic;
    float roughness=materials[material_id].roughness;
    float anistropic=materials[material_id].anistropic;
    float clearcoat=materials[material_id].clearcoat;
    float clearcoat_gloss=materials[material_id].clearcoatGloss;
    
    vec3 Y=get_aniso_Y(N);
    vec3 X=normalize(cross(Y,N));
    vec3 brdf=getBRDF(w_in,w_out,N,X,Y,material_id);
    vec3 t_color=brdf*in_dot_N;
    
    float lumc=.2126*color.r+.7152*color.g+.0722*color.b;
    vec3 ctint;
    if(lumc==0.)
    ctint=vec3(0.);
    else
    ctint=color/lumc;
    vec3 Cs=mix(.08*specular_coef*mix(vec3(1.),ctint,specular_tint),color,metallic);
    vec3 Fs=fresnelSchlick(in_dot_N,Cs);
    float F=length(Fs);
    
    float dif=min(.8,(1.-metallic)*(1.-F));
    float sp=(1.-dif)*2./(2.+clearcoat);
    float cl=(1.-dif)*clearcoat/(2.+clearcoat);
    
    float p_dif=N_dot_H/PI;
    
    float aspect=sqrt(1.-.9*anistropic);
    float ax=sqr(roughness)/aspect;
    float ay=sqr(roughness)*aspect;
    float Ds=GTR2_aniso(N_dot_H,dot(H,X),dot(H,Y),ax,ay);
    float p_sp=Ds*N_dot_H;
    
    float Dc=GTR1(N_dot_H,mix(.1,.001,clearcoat_gloss));
    float p_cl=Dc*N_dot_H;
    
    float p=dif*p_dif+sp*p_sp+cl*p_cl;
    p/=4.*in_dot_H;
    
    return t_color/p;
}

vec3 getDirLight(Intersect inter,Intersect inter_light,vec3 w_out)
{
    vec3 dir=normalize(inter_light.position-inter.position);
    
    vec3 N=inter.normal;
    vec3 Y=get_aniso_Y(N);
    vec3 X=normalize(cross(Y,N));
    vec3 brdf=getBRDF(w_out,dir,N,X,Y,inter.material_id);
    float dis=length(inter_light.position-inter.position);
    vec3 light_dir=materials[0].baseColor*brdf*max(dot(dir,inter.normal),0.)*max(dot(-dir,inter_light.normal),0.);
    light_dir/=dis*dis;
    return light_dir*light_area;
}

void main(void)
{
    if(gl_GlobalInvocationID.x>=dims.x||gl_GlobalInvocationID.y>=dims.y)
    return;
    
    ivec2 pixel_coords=ivec2(gl_GlobalInvocationID.xy);
    
    uint x_pixel=pixel_coords.x;
    uint y_pixel=pixel_coords.y;
    
    float rand_x=getRandom(x_pixel);
    float rand_y=getRandom(y_pixel);
    uint state=time_seed*x_pixel*y_pixel;
    
    vec3 light_total=vec3(0.);
    for(int iter=0;iter<spp;iter++)
    {
        float x_shift=getRandom(state);
        float y_shift=getRandom(state);
        
        vec2 pixel_pos=(vec2(pixel_coords)+vec2(x_shift,y_shift))/float(dims.y)*2.-vec2(float(dims.x)/float(dims.y),1.);
        vec3 dir=vec3(tan(.5*FOV)*pixel_pos.x,tan(.5*FOV)*pixel_pos.y,-1.);
        dir=mat3(view)*dir;
        
        Ray ray;
        ray.origin=camera_position;
        ray.direction=normalize(dir);
        ray.direction_inv=inverseVec3(ray.direction);
        
        vec3 light=vec3(0.);
        vec3 attenuation=vec3(1.);
        
        Intersect inter=get_intersect_BVH(ray);
        vec4 normal_depth=vec4(inter.normal,inter.dis);
        vec4 pos_out=vec4(inter.position,1.);
        if(inter.happened==false)
        pos_out.w=0.;
        
        imageStore(normal_out,pixel_coords,normal_depth);
        imageStore(position_out,pixel_coords,pos_out);
        
        for(int i=0;i<2;i++)
        {
            if(inter.happened==true)
            {
                vec3 w_out=-ray.direction;
                if(inter.material_id==0)
                {
                    if(i==0)
                    {
                        light=materials[0].baseColor;
                        break;
                    }
                }
                else
                {
                    Intersect inter_light=sampleLight(inter,state);
                    if(inter_light.happened)
                    {
                        light+=attenuation*getDirLight(inter,inter_light,w_out);
                    }
                }
                
                if(getRandom(state)<1.-roussian_roulette)
                break;
                
                //generate ray
                ray.origin=inter.position;
                float in_dot_N=max(dot(w_out,inter.normal),0.);
                
                vec3 H=importanceSample(inter.normal,in_dot_N,state,inter.material_id);
                ray.direction=normalize(2.*dot(w_out,H)*H-w_out);
                ray.direction_inv=inverseVec3(ray.direction);
                
                if(dot(ray.direction,inter.normal)<0.)
                break;
                attenuation*=getAttenuation(ray.direction,w_out,inter.normal,inter.material_id);
                attenuation/=roussian_roulette;
                
                inter=get_intersect_BVH(ray);
            }
            else
            {
                break;
            }
        }
        light_total+=light;
    }
    light_total=light_total/spp;
    imageStore(color_out,pixel_coords,vec4(light_total,1.));
}
